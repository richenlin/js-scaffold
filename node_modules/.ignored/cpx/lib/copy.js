"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.copySync = copySync;

var _fs = require("fs");

var MAX_BUFFER = 2048;

/**
 * @param {string} src - A path of the source file.
 * @param {string} dst - A path of the destination file.
 * @param {function[]} transformFactories - Factory functions for transform streams.
 * @param {function} cb - A callback function that called after copied.
 * @private
 */

function copy(src, dst, transformFactories, cb) {
  var reader = (0, _fs.createReadStream)(src);
  var writer = (0, _fs.createWriteStream)(dst);
  var streams = [reader];

  function done(err) {
    try {
      streams.forEach(function (s) {
        s.removeListener("error", done);
        s.destroy();
      });
      writer.removeListener("error", done);
      writer.removeListener("finish", done);
    } catch (cleanupErr) {
      err = err || cleanupErr;
    }

    cb(err);
  }

  reader.on("error", done);
  writer.on("error", done);
  writer.on("finish", done);

  try {
    transformFactories.reduce(function (input, factory) {
      var t = factory(src);
      t.on("error", done);
      streams.push(t);

      return input.pipe(t);
    }, reader).pipe(writer);
  } catch (err) {
    done(err);
  }
}

/**
 * @param {string} src - A path of the source file.
 * @param {string} dst - A path of the destination file.
 * @private
 */

function copySync(src, dst) {
  var buffer = new Buffer(MAX_BUFFER);
  var bytesRead = MAX_BUFFER;
  var pos = 0;
  var input = (0, _fs.openSync)(src, "r");
  try {
    var output = (0, _fs.openSync)(dst, "w");
    try {
      while (MAX_BUFFER === bytesRead) {
        bytesRead = (0, _fs.readSync)(input, buffer, 0, MAX_BUFFER, pos);
        (0, _fs.writeSync)(output, buffer, 0, bytesRead);
        pos += bytesRead;
      }
    } finally {
      (0, _fs.closeSync)(output);
    }
  } finally {
    (0, _fs.closeSync)(input);
  }
}